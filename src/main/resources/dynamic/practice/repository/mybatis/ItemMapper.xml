<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dynamic.practice.repository.mybatis.ItemMapper">

    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into item(item_name, price, quantity)
        values(#{itemName}, #{price}, #{quantity})
    </insert>

    <update id="update">
        update item
        set
            item_name = #{updateParam.itemName},
            price = #{updateParam.price},
            quantity = #{updateParam.quantity}
        where id = #{id}
    </update>

    <select id="findById" resultType="Item">
        select id, item_name, price, quantity
        from item
        where id = #{id}
    </select>

    <select id="findAll" resultType="Item">
        select id, item_name, price, quantity
        from item
        <where>
            <if test="itemName != null and itemName != ''">
                and item_name like concat('%' ,#{itemName} , '%')
            </if>
            <!--            <if test="maxPrice != null">-->
            <!--                and price &lt;= #{maxPrice}-->
            <!--            </if>-->
            <if test="maxPrice != null">
                <![CDATA[
                    and price <= #{maxPrice}
                ]]>
            </if>
        </where>
    </select>

    <!-- "MyBatis기능 정리1-동적쿼리", 동적 SQL 연습 -->
<!--    if-->
    <select id="findPrice44444WithTitleLike" resultType="Item">
        SELECT * FROM ITEM
        WHERE PRICE = 44444
        <if test="itemName != null">
            AND ITEM_NAME LIKE #{itemName}
        </if>
    </select>
<!--    choose, when, otherwise-->
    <select id="chooseWhenOtherwiseTest" resultType="Item">
        SELECT * FROM ITEM WHERE 1=1
        <choose>
            <when test="itemName != null">
                AND item_name like #{itemName}
            </when>
            <when test="gift != null and gift.price != null">
                AND price like #{gift.price}
            </when>
            <otherwise>
                AND id = 1
            </otherwise>
        </choose>
    </select>
<!--    tirm-->
    <select id="testTrim" resultType="Item">
        SELECT * FROM ITEM
        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="itemName != null and itemName != ''">
                AND item_name LIKE CONCAT('%', #{itemName}, '%')
            </if>
            <if test="maxPrice != null">
                <![CDATA[
                    AND price <= #{maxPrice}
                ]]>
            </if>
        </trim>
    </select>
<!--    foreach-->
    <select id="foreachTest" resultType="Item">
        SELECT * FROM ITEM WHERE
        <foreach
                collection="items"
                open="price IN ("
                close=")"
                separator=","
                index="inForeachIndex"
                item="inForeachValue">
        #{inForeachValue.price}
        </foreach>
    </select>

<!--    우선 <foreach>를 쓰려면 일단 itemMaper.xml의 <foreach>를 포함하는 태그(함수) 부분에-->
<!--    파라미터로 리스트(List<Item> itemList)와 같은 컬랙션이 들어와야 한다.-->
<!--    <foreach>의 속성-->
<!--    collection : 파라미터로 들어온 컬랙션(여기서는 리스트, List<Item> itemList)의-->
<!--    키값을 써준다. 만일 itemMapper.java 에서 @Param("items") List<Item> itemList-->
<!--    을 인자로 넘기면 collection="items" 이렇게 써준다.-->
<!--    open : <foreach>는 컬랙션의 값들에 반복적인 과정을 적용시키기 위함이고 적용시켜서-->
<!--    결국에는 SQL문장을 만들어 낸다 최종적으로 만들어진 SQL문장(부분 문장)-->
<!--    에서 맨 앞에 써주는 문장에 대한 설정을 하는 것이다. 예를들어서 open="id in ("-->
<!--    이런식으로 쓴다.-->
<!--    close : <foreach>는 컬랙션의 값들에 반복적인 과정을 적용시키기 위함이고 적용시켜서-->
<!--    결국에는 SQL문장을 만들어 낸다 최종적으로 만들어진 SQL문장(부분 문장)-->
<!--    에서 맨 뒤에 써주는 문장에 대한 설정을 하는 것이다. 예를들어서 close=")"-->
<!--    이런식으로 쓴다.-->
<!--    separator : <foreach>는 컬랙션의 값들에 반복적인 과정을 적용시키기 위함이고 적용시켜서-->
<!--    결국에는 SQL문장(부분 문장)을 만들어 낸다. 이때 컬랙션의 각각의 값에 대해서-->
<!--    각각의 과정을 적용시키는데, 적용이 된 컬랙션의 각각의 값을 구분짓는 것에-->
<!--    대한 설정이다. 예를들어서 separator="," 이런식으로 쓴다.-->
<!--    index : <foreach> 문을 통해서 최종적으로는 SQL문장(부분 문장)을 만드는데 이 과정에서,-->
<!--    <foreach>가 처리하는 과정에서(내부에서) 컬랙션의 값들을 구분짓는 인덱스에 대한-->
<!--    설정이다. 임의의 값을 줘도 된다. 예를들어서 index="inForeachIndex" 이런식으로 쓴다.-->
<!--    item : 현재 파라미터로 들어오는 값이 item인것이 많아서 헷갈릴수 있는데, 전혀 다른 속성이다.-->
<!--    이 속성의 의미는 <foreach>문 안에서 쓰이는 컬랙션에 대해서 컬랙션 안에 있는 각각의-->
<!--    값 자체를 <foreach>문 내부에서는 어떻게 표현할지에 대해서 정의하는 것이다. 이 또한-->
<!--    임의의 값을 줘도 된다. 예를들어서 item="inForeachValue" 이런식으로 쓴다.-->

<!--    **  주의  **-->
<!--    <foreach>문안에서 collection, index, item 속성과 값을 이용해서 반복적인 과정을 인자로 들어온 컬랙션에-->
<!--    적용을 시킴으로서 최종적인 SQL문장(부분 문장)을 만들때 당연히 collection의 값, index의 값, item의 값을-->
<!--    <foreach>문 안에서 쓸 수가 있는데, 이때에도 그 값( collection의 값, index의 값, item의 값 )을-->
<!--    #{...} 안에 써준다. (파라미터로 들어오는 값을 받을때와 동일하다.)-->

</mapper>